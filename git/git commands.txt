git clone <path-to-repository-to-clone>
git status

git log	= git log --decorate	# Opens the log of all commits
								# to sarch inside the log file type /SEARCH_TEXT
								# to quit press q

git log --oneline				# summarize the log to a SHA and the commit message. Note that the option is --oneline NOT --online
git log --status				# display modified files in commits and the number of modified/added/removed lined
git log -p/ git log --patch		# display the changed lines in the modified files
git log -p -w					# -w removes whitespace changes in the output
git log -p START_SHA			# display all commits that have START_SHA as their SHA value for example:git log -p fdf5493
git show START_SHA				# It's equal to git log -p START_SHA but it displays only one commit as the result


git add FILE_NAME1 FILE_NAME2 ...		# This command adds the untracked file FILE_NAME1 and 2 to the staging index
										# The act of moving a file from the Working Directory to the Staging Index is called "staging". 
										# If a file has been moved, then it has been "staged". 
										# Moving a file from the Staging Index back to the Working Directory will unstage the file
git add	.								# This command adds all untracked file FILE_NAME to the staging index
git restore --staged <file>				# It unstage all files that exist in the Staging Index to the Working Directory

git commit								# Opens an editor to write a comment and the it commits the Staging Index to the repo
git commit -m "Initial commit"			# Bypass the openning the editor with -m and the following comment
git diff								# The git diff command can be used to see changes that have been made but haven't been committed, yet.



										# Globbing Crash Course
										# Let's say that you add 50 images to your project, but want Git to ignore all of them. Does this mean you have to list each and every filename in the .gitignore file? Oh gosh no, that would be crazy! Instead, you can use a concept called globbing.

										# Globbing lets you use special characters to match patterns/characters. In the .gitignore file, you can use the following:

										# blank lines can be used for spacing
										# # - marks line as a comment
										# * - matches 0 or more characters
										# ? - matches 1 character
										# [abc] - matches a, b, or c
										# ** - matches nested directories - a/**/z matches
										# a/z
										# a/b/z
										# a/b/c/z
		
git tag <tagname>						# When you use git tag <tagname>, Git will create a tag at the current revision but will not prompt you for an annotation. 
										# It will be tagged without a message (this is a lightweight tag)
										# Push annotated tags, keep lightweight local
git tag -a -m <msg> <tagname>			# When you use git tag -a -m <msg> <tagname>, Git will tag the commit and annotate it with the provided message
git push --tags							# Pushes all tags to the remote repository
git tag -d <tagname>					# Delets the tag tagname
git tag -a <tagname> <SHA>				# Assigns a tag to the specific commit referenced by SHA


git branch								# List all branches
git branch <branchname>					# creates branch with the name branchname
git push origin <branchname>			# Pushes the branch branchname to the remote repository



