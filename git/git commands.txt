git clone <path-to-repository-to-clone>
git status					# Prints the status of the git and untracked and uncommited files.

git config --system			# System level config
git config --global			# User level config
git config					# Project level config

git log	= git log --decorate	# Opens the log of all commits
								# to sarch inside the log file type /SEARCH_TEXT
								# to quit press q
								
git log -n <number>				# limits the log to show <number> commits in the output	
git log --since=2018-01-01		# Shows the commits since the given date			
git log --until=2018-01-01		# Shows the commits until the given date
git log --author="Kevin"
git log --grep="search keyword" # search among commit messages and displays the commits that have the keyword

git log --oneline				# summarize the log to a SHA and the commit message. Note that the option is --oneline NOT --online
git log --stat					# display modified files in commits and the number of modified/added/removed lined
git log -p/ git log --patch		# display the changed lines in the modified files
git log -p -w					# -w removes whitespace changes in the output
git log -p START_SHA			# display all commits that have START_SHA as their SHA value for example:git log -p fdf5493
git show START_SHA				# It's equal to git log -p START_SHA but it displays only one commit as the result


git add FILE_NAME1 FILE_NAME2 ...		# This command adds the untracked file FILE_NAME1 and 2 to the staging index
										# The act of moving a file from the Working Directory to the Staging Index is called "staging". 
										# If a file has been moved, then it has been "staged". 
										# Moving a file from the Staging Index back to the Working Directory will unstage the file
git add	.								# This command adds all untracked file FILE_NAME to the staging index
git rm FILE_NAME1 FILE_NAME2			# deletes the files
git mv oldName newName					# Rename the given file  
git mv fileName path/fileName			# Moves the file to the given path

git restore --staged <file>				# It unstage all files that exist in the Staging Index to the Working Directory

git commit								# Opens an editor to write a comment and the it commits the Staging Index to the repo
git commit -m "Initial commit"			# Bypass the openning the editor with -m and the following comment
git diff								# The git diff command can be used to see changes that have been made but haven't been committed, yet.
										# git diff shows the difference between untracked files and staged files
git diff --staged						# Shows the difference between staged files and repo files
git diff --cached						# Is the same as git diff --staged
git diff --color-words					# Highlights the changes with different colors

										# Globbing Crash Course
										# Let's say that you add 50 images to your project, but want Git to ignore all of them. Does this mean you have to list each and every filename in the .gitignore file? Oh gosh no, that would be crazy! Instead, you can use a concept called globbing.

										# Globbing lets you use special characters to match patterns/characters. In the .gitignore file, you can use the following:

										# blank lines can be used for spacing
										# # - marks line as a comment
										# * - matches 0 or more characters
										# ? - matches 1 character
										# [abc] - matches a, b, or c
										# ** - matches nested directories - a/**/z matches
										# a/z
										# a/b/z
										# a/b/c/z
		
git tag <tagname>						# When you use git tag <tagname>, Git will create a tag at the current revision but will not prompt you for an annotation. 
										# It will be tagged without a message (this is a lightweight tag)
										# Push annotated tags, keep lightweight local
git tag -a -m <msg> <tagname>			# When you use git tag -a -m <msg> <tagname>, Git will tag the commit and annotate it with the provided message
git push --tags							# Pushes all tags to the remote repository
git tag -d <tagname>					# Delets the tag tagname
git tag -a <tagname> <SHA>				# Assigns a tag to the specific commit referenced by SHA


git branch								# List all branches
git branch <branchname>					# creates branch with the name branchname
git push origin <branchname>			# Pushes the branch branchname to the remote repository.
git branch -d <branchname>				# deletes the branch <branchname>. Git doesn't let you a branch that has uncommited or unmerged changes.
git branch -D <branchname>				# Force deletes the branch even if it has uncommited or unmerged changes.
git push origin --delete <branch_name>	# Deletes remote branch

git stash -a -u = git stash --all --include-untracked		# Save all uncommited files included untracked and ignore files
git checkout <branchname>				# Switches to the branch <branchname>. Note that you should commit all changes OR stash changes befor switching to the branch
git log --oneline --decorate --graph --all		# List all commits from all branches


git merge <another-branch>		# Merges the <another-branch> to the currently checkedout branch. This is called "merge in"
								# If branch B is created from A and A has not any change, merging B to A is like checking out B to A and commiting A.
								# This is called Fast-Forward Merge
git merge --abort				# Aborts the merge


git commit --amend				# If your Working Directory is clean, this command will let you provide a new commit message.
								# To include any changes in the files that you want to add:
								# 1- Edit the file(s)
								# 2- Save the file(s)
								# 3- Stage the file(s)
								# 4- And run git commit --amend
								
git revert <SHA-of-commit-to-revert>	# This command revert any changes in the last commit.  
										# This command add another commit that is similar to the first commit before reverted commit.
										# In other word CommitA--->CommitB---->(revertAction)--->CommitA
										# You have the information about commitB that was reverted
										# In reset: CommitA---->CommitB---->(Reset). In this command CommitB is completely deleted
										# So you can not access the changes in CommitB.
										# RESET IS DANGEROUS
										# To alleviate the stress a bit, Git does keep track of everything for about 30 days before it completely erases anything.
										# To access this content, you'll need to use the (git reflog) command. Check out these links for more info
											
git reset <reference-to-commit>			# DANGEROUS----------for example git reset HEAD~6

										# You already know that you can reference commits by their SHA, by tags, branches, and the special HEAD pointer. 
										# Sometimes that's not enough, though. There will be times when you'll want to reference a commit relative to another commit. 
										# For example, there will be times where you'll want to tell Git about the commit that's one before the current commit…or two before the current commit. 
										# There are special characters called "Ancestry References" that we can use to tell Git about these relative references. Those characters are:

										# ^ – indicates the parent commit
										# ~ – indicates the first parent commit
										#	Here's how we can refer to previous commits:

										#	the parent commit – the following indicate the parent commit of the current commit
										# HEAD^
										# HEAD~
										# HEAD~1
										# 	the grandparent commit – the following indicate the grandparent commit of the current commit
										# HEAD^^
										# HEAD~2
										# 	the great-grandparent commit – the following indicate the great-grandparent commit of the current commit
										# HEAD^^^
										# HEAD~3
										# 	The main difference between the ^ and the ~ is when a commit is created from a merge. 
										# 	A merge commit has two parents. With a merge commit, the ^ reference is used to indicate the first parent of the commit while ^2 indicates the second parent. 
										# 	The first parent is the branch you were on when you ran git merge while the second parent is the branch that was merged in
										
git reset --mixed HEAD~1				# Default: reset the Head pointer to the parent and commited changes to the Working Directory
git reset --soft HEAD~1					# Default: reset the Head pointer to the parent and commited changes to the Staging Index
git reset --hard HEAD~1					# Default: reset the Head pointer to the parent and commited changes to the Trash

git branch backup						# Backups the branch

git push <remote-shortname> <branch>	# pushes the branch <branch> to the remote repo. For example git push origin master
git pull <remote-shortname> <branch>	# Gets the changes on the remote repo to the local repository. For example git pull origin master
										# This command automatically merges the changes from origin/master to the local master and it may cause conflicts

git fetch <remote-shortname> <branch>	# This is the same as git pull but it does not merge the changes from origin/master to the local master
git merge origin/master					# Ths command merges the fetched changes to the local master


git shortlog							# Displays log and the authors of the project that is sorted alphabetically based on author's name.

git shortlog -s -n						# Displays the list of authors and the number of commits for each of them 
git log --author=Surma					# Displays the commits of the given author

git log --grep=bug						# Filters the log based on given key in the description of commits

git remote add <name> <url-of-remote>	# This command adds a url of repo to the list of repository. If you have cloned from repository, you have 
										# by default two remote url: One for fetch and one for push
										
git remote -v 							# List all remote URLs. For example:
										# 					origin  https://github.com/GoogleChrome/lighthouse.git (fetch)
										#					origin  https://github.com/GoogleChrome/lighthouse.git (push)
										
										
git remote add <name> <url-of-origin-that-you-forked-from> 	# ORIGIN_REPO(upstream)----(Forked)------>YOUR_REMOTE_REPO(origin)
															# You have already the origin url in your local that you can fetch YOUR_REMOTE_REPO changes
															# You can add ORIGIN_REPO url into your local config to fetch directly from ORIGIN_REPO(upstream)
															
git remote add upstream <url-of-origin-that-you-forked-from>	# Example of above command		

git remote rename <old-name> <new-name>	

git rebase -i <base>					# For example : git rebase -i HEAD~3
										# This command merges 3 last commits to a single commit. 
										# Be careful and backup current branch by executing git branch backup
										# -i indicates interactive mode
										# commit0---commit1---commit2---commit3----commit4(head)
										# By executing above command we get:
										# commit0----commit5(head) that commit5 is squashs of commit1-4


